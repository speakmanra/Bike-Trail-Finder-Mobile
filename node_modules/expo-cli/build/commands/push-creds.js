"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = program => {
  program.command('push:android:upload [project-dir]').description('Uploads a Firebase Cloud Messaging key for Android push notifications.').option('--api-key [api-key]', 'Server API key for FCM.').asyncActionProjectDir(async (projectDir, options) => {
    if (!options.apiKey || options.apiKey.length === 0) {
      throw new Error('Must specify an API key to upload with --api-key.');
    }

    (0, _log().default)('Reading project configuration...');
    const {
      args: {
        remotePackageName
      }
    } = await _xdl().Exp.getPublishInfoAsync(projectDir);
    (0, _log().default)('Logging in...');
    let user = await _xdl().UserManager.getCurrentUserAsync();

    let apiClient = _xdl().ApiV2.clientForUser(user);

    (0, _log().default)("Setting API key on Expo's servers...");
    await apiClient.putAsync(`credentials/push/android/${remotePackageName}`, {
      fcmApiKey: options.apiKey
    });
    (0, _log().default)('All done!');
  }, true);
  program.command('push:android:show [project-dir]').description('Print the value currently in use for FCM notifications for this project.').asyncActionProjectDir(async projectDir => {
    const {
      args: {
        remotePackageName
      }
    } = await _xdl().Exp.getPublishInfoAsync(projectDir);
    let user = await _xdl().UserManager.getCurrentUserAsync();

    let apiClient = _xdl().ApiV2.clientForUser(user);

    let result = await apiClient.getAsync(`credentials/push/android/${remotePackageName}`);

    if (result.status === 'ok' && result.fcmApiKey) {
      console.log(JSON.stringify(result));
    } else {
      throw new Error('Server returned an invalid result!');
    }
  }, true);
  program.command('push:android:clear [project-dir]').description('Deletes a previously uploaded FCM credential.').asyncActionProjectDir(async projectDir => {
    (0, _log().default)('Reading project configuration...');
    const {
      args: {
        remotePackageName
      }
    } = await _xdl().Exp.getPublishInfoAsync(projectDir);
    (0, _log().default)('Logging in...');
    let user = await _xdl().UserManager.getCurrentUserAsync();

    let apiClient = _xdl().ApiV2.clientForUser(user);

    (0, _log().default)("Deleting API key from Expo's servers...");
    await apiClient.deleteAsync(`credentials/push/android/${remotePackageName}`);
    (0, _log().default)('All done!');
  }, true);
};

exports.default = _default;
//# sourceMappingURL=../__sourcemaps__/commands/push-creds.js.map
