"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = program => {
  program.command('install:ios').description('Install the latest version of Expo Client for iOS on the simulator').asyncAction(async () => {
    _log().default.warn('expo install:ios is deprecated.\nUse `expo client:install:ios` instead.');

    if (await _xdl().Simulator.upgradeExpoAsync()) {
      (0, _log().default)('Done!');
    }
  }, true);
  program.command('install:android').description('Install the latest version of Expo Client for Android on a connected device or emulator').asyncAction(async () => {
    _log().default.warn('expo install:android is deprecated.\nUse `expo client:install:android` instead.');

    if (await _xdl().Android.upgradeExpoAsync()) {
      (0, _log().default)('Done!');
    }
  }, true);
};

exports.default = _default;
//# sourceMappingURL=../__sourcemaps__/commands/install-deprecated.js.map
